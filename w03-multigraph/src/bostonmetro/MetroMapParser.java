package bostonmetro;

import graph.IMultigraph;
import graph.Multigraph;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.StringTokenizer;

public class MetroMapParser {
    private BufferedReader fileInput;
    private IMultigraph mg;

    /**
     * creates a new parser that will read from the file
     * filename unless the file does not exist. The filename should specify
     * the exact location of the file. This means it should be something like
     *
     * @return a new MetroMapParser that will parse the file filename
     * @throws java.io.IOException if there <tt>filename</tt> cannot be read
     */

    public MetroMapParser(String filename) throws IOException {
        //a buffered reader reads line by line, returning null when file is done
        fileInput = new BufferedReader(new FileReader(filename));
        //data structure to hold data extracted from textile
        mg = new Multigraph();
    }

    /**
     * Parses the file, and generates a graph from it, unless there
     * is a problem reading the file, or there is a problem with the format of the
     * file.
     *
     * @throws java.io.IOException if there is a problem reading the file
     * @throws BadFileException    if there is a problem with the format of the file
     * @returns the Graph generated by the file
     */
    public IMultigraph generateGraphFromFile() throws IOException, BadFileException {
        String line = fileInput.readLine();
        StringTokenizer st;
        String stationID;
        String stationName;
        String lineName;
        String outboundID, inboundID;

        while (line != null) {
            st = new StringTokenizer(line);

            //We want to handle empty lines effectively, we just ignore them!
            if (!st.hasMoreTokens()) {
                line = fileInput.readLine();
                continue;
            }

            //from the grammar, we know that the Station ID is the first token on the line
            stationID = st.nextToken();

            if (!st.hasMoreTokens()) {
                throw new BadFileException("no station name");
            }

            //from the grammar, we know that the Station Name is the second token on the line.
            stationName = st.nextToken();

            if (!st.hasMoreTokens()) {
                throw new BadFileException("station is on no lines");
            }


            while (st.hasMoreTokens()) {
                lineName = st.nextToken();

                if (!st.hasMoreTokens()) {
                    throw new BadFileException("poorly formatted line info");
                }
                outboundID = st.nextToken();

                if (!st.hasMoreTokens()) {
                    throw new BadFileException("poorly formatted adjacent stations");
                }
                inboundID = st.nextToken();

                addLine(stationID, stationName, lineName, outboundID, inboundID);
            }

            line = fileInput.readLine();
        }

        return mg;
    }

    /**
     * * Adds a lines to the graph
     *
     * @param stationID
     * @param stationName
     * @param lineName
     * @param outboundID
     * @param inboundID
     */
    private void addLine(String stationID, String stationName, String lineName, String outboundID, String inboundID) {
        int station = Integer.parseInt(stationID);

        // Add inbound station
        int inbound = Integer.parseInt(inboundID);
        mg.addEdge(station, inbound, stationName, lineName);

        //Add outbound station
        int outbound = Integer.parseInt(outboundID);
        mg.addEdge(station, outbound, stationName, lineName);
    }

}
